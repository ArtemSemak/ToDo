{"version":3,"sources":["TDCard.js","TDlLst.js","Pagination.js","InputToDo.js","App.js","reportWebVitals.js","index.js"],"names":["TDCard","todo","onChange","deleteTodo","editing","isEdit","setIsEdit","isEditingTodo","useState","value","setValue","classes","completed","push","className","type","id","checked","isEditing","onSubmit","event","preventDefault","trim","submitHandler","autoFocus","onKeyDown","key","escHandler","target","placeholder","onClick","join","title","date","src","TDList","sortedTodos","doneTodo","removeTodo","length","map","Pagination","todosLength","todosPerPage","pageClick","prevPage","nextPage","currentPage","pages","i","Math","ceil","class","page","InputToDo","addTodo","App","Date","todos","setTodos","setSortedTodos","setCurrentPage","doneUnDone","setDoneUnDone","todosForCurrentPage","slice","sortByDate","flag","list","sort","a","b","newList","Object","assign","sortByComplete","filter","it","now","console","log","concat","getDate","getMonth","getFullYear","newTitle","number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d5f0470.chunk.js","sourcesContent":["import './App.css';\r\nimport { useState } from 'react'\r\n\r\nfunction TDCard({ todo, onChange, deleteTodo, editing, isEdit, setIsEdit, isEditingTodo}) {\r\n  const [value, setValue] = useState('')\r\n  const classes = ['titleToDo']\r\n  if (todo.completed) {\r\n    classes.push('done')\r\n  }\r\n\r\n  \r\n\r\n  function clickHandler() {\r\n    if (!isEdit) {\r\n      isEditingTodo(todo.id)\r\n      setIsEdit(true)\r\n    }\r\n  }\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault()\r\n    if (value.trim()) {\r\n      editing(todo.id, value)\r\n      isEditingTodo(todo.id)\r\n      setIsEdit(false)\r\n  }\r\n  }\r\n\r\n  function escHandler(event) {\r\n    if (event.key === 'Escape') {\r\n      isEditingTodo(todo.id)\r\n      setIsEdit(false)\r\n    }\r\n  }\r\n\r\n \r\n    return (\r\n        <section className=\"td\">\r\n        <section >\r\n            <span><label>\r\n                <input  type='checkbox' onChange={ () => onChange(todo.id) } checked={ todo.completed }/>\r\n                <span className=\"test\"></span>\r\n              </label>\r\n               </span>\r\n               {todo.isEditing ? <form className='input-for-edit' onSubmit={event => submitHandler(event)\r\n               } ><input autoFocus onKeyDown={ (event) => escHandler(event)} value={value} onChange={event => setValue(event.target.value)} placeholder=\"I want to do...\" /></form> : \r\n               <button onClick={ clickHandler } className='qwe'><span  className={ classes.join(' ') }> { todo.title } </span></button>}\r\n        </section>\r\n        <section>\r\n          <label className=\"lbltext\"> { todo.date } </label>\r\n          <input type=\"image\" className=\"btnD trash\" src=\"premium-icon-trash-can-4914888.png\" title=\"Delete plan\" onClick={ () => {\r\n            deleteTodo(todo.id)\r\n            setIsEdit(false)} }/>\r\n      </section>\r\n    </section>\r\n    )\r\n          \r\n}\r\n\r\n\r\nexport default TDCard","import './App.css';\r\nimport TDCard from './TDCard';\r\nimport { useState } from 'react'\r\n\r\n\r\nfunction TDList({ sortedTodos, doneTodo, removeTodo, editing, isEditingTodo, setIsEdit, isEdit}) {\r\n    \r\n    \r\n    return (\r\n        <main className=\"tds\">\r\n            { sortedTodos.length ?  sortedTodos.map( todo => {\r\n            return <TDCard isEditingTodo={isEditingTodo} isEdit={isEdit} setIsEdit={setIsEdit} editing={editing} todo={todo} onChange={doneTodo} deleteTodo={removeTodo}/>\r\n            }) : <p className=\"noTD\">You dont have ToDos</p>}\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default TDList","import './App.css';\r\n\r\n\r\n\r\nfunction Pagination({ todosLength, todosPerPage, pageClick, prevPage, nextPage, currentPage }) {   \r\n    const pages = []\r\n\r\n    \r\n\r\n    for (let i = 1; i <= Math.ceil(todosLength / todosPerPage); i++) {\r\n        pages.push(i)\r\n    }\r\n    \r\n        if (pages.length > 1) {\r\n            return (\r\n                    <section className='footer'>\r\n                            <input class=\"btnD arrows\" type=\"image\" src=\"left.png\" title=\"Previous page\" onClick={prevPage}/>\r\n                            {\r\n                                pages.map(page => {\r\n                                    if (page === currentPage){\r\n                                        return <input className='footer-item active' type=\"button\" value={page} onClick={() => pageClick(page)}/>}\r\n                                        else {\r\n                                            return <input className='footer-item' type=\"button\" value={page} onClick={() => pageClick(page)}/>\r\n                                        }})\r\n                            }\r\n                            <input class=\"btnD arrows\" type=\"image\" src=\"right.png\" title=\"Next page\" onClick={nextPage}/>\r\n                    </section> \r\n        ) } else {\r\n            return <span></span>\r\n        }\r\n    } \r\n\r\n\r\nexport default Pagination","import './App.css'\r\nimport { useState } from 'react'\r\n\r\n\r\nfunction InputToDo({ addTodo }) {\r\n    const [value, setValue] = useState('')\r\n    \r\n    return (\r\n        <section>\r\n          <form onSubmit={event => {\r\n        event.preventDefault()\r\n        addTodo(value)\r\n        setValue('')\r\n      }}>\r\n            <input autoFocus type=\"text\" value={value} onChange={event => setValue(event.target.value)} placeholder=\"I want to do...\" className=\"inpTD\" title=\"Write your plan here\"/>\r\n            <button type=\"submit\"  className=\"btnAdd\" title=\"Add your plan\">Add</button>\r\n          </form> \r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nexport default InputToDo","import './App.css';\r\n\r\nimport { useState } from 'react'\r\nimport TDList from './TDlLst'\r\nimport Pagination from './Pagination'\r\nimport InputToDo from './InputToDo'\r\n\r\nfunction App() {\r\n  const date = new Date()\r\n  const [todos, setTodos] = useState([])\r\n  const [sortedTodos, setSortedTodos] = useState([])\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [doneUnDone, setDoneUnDone] = useState('all')\r\n  const [isEdit, setIsEdit] = useState(false)\r\n  const todosPerPage = 5\r\n  const todosForCurrentPage = sortedTodos.slice(currentPage * todosPerPage - 5, currentPage * todosPerPage )\r\n\r\n  \r\n  function removeTodo(id) {\r\n    setTodos(todos.filter(todo => todo.id !== id))\r\n    setSortedTodos(sortedTodos.filter(todo => todo.id !== id))\r\n    console.log(todosForCurrentPage)\r\n    if (todosForCurrentPage.length - 1 === 0 && currentPage != 1) {\r\n      setCurrentPage(currentPage - 1)\r\n    }\r\n  }\r\n\r\n\r\nfunction doneTodo(id) {\r\n    setSortedTodos(\r\n      sortedTodos.map( todo => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed\r\n        }\r\n        return todo\r\n      }\r\n      )\r\n    ) \r\n    \r\n  }\r\n\r\n  function isEditingTodo(id) {\r\n    setSortedTodos(\r\n      sortedTodos.map( todo => {\r\n        if (todo.id === id) {\r\n          todo.isEditing = !todo.isEditing\r\n        }\r\n        return todo\r\n      }\r\n      )\r\n    ) \r\n    \r\n  }\r\n  \r\n  function editToDo(id, newTitle) {\r\n    setTodos(\r\n      todosForCurrentPage.map( todo =>{\r\n        if (todo.id === id) {\r\n          todo.title = newTitle\r\n        } return todo}\r\n    )\r\n    )}\r\n  \r\n  function sortByDate(flag) {\r\n    setIsEdit(false)\r\n    if (flag === 'up') {\r\n     \r\n      const list = sortedTodos.sort((a, b) => b.id - a.id)\r\n      let newList = []\r\n      Object.assign(newList, list)\r\n      setSortedTodos(newList)\r\n    } else { \r\n      const list = sortedTodos.sort((a, b) => a.id - b.id)\r\n      let newList = []\r\n      Object.assign(newList, list)\r\n      setSortedTodos(newList)\r\n    }\r\n\r\n    setTodos(todos.map(todo => {if (todo.isEditing !== false){\r\n        todo.isEditing = false\r\n      }\r\n      return todo }))\r\n\r\n      \r\n  }\r\n\r\n  function sortByComplete(flag) {\r\n    setIsEdit(false)\r\n    setCurrentPage(1)\r\n    if (flag === 'all') {\r\n      setSortedTodos(todos)\r\n      setDoneUnDone('all')\r\n    }\r\n    else if (flag === 'done'){\r\n      setDoneUnDone('done')\r\n      setSortedTodos(todos.filter(it => it.completed === true))\r\n    } else {\r\n      setSortedTodos(todos.filter(it => it.completed === false))\r\n      setDoneUnDone('undone')\r\n    }\r\n\r\n    setTodos(todos.map(todo => {if (todo.isEditing !== false){\r\n      todo.isEditing = false\r\n    }\r\n    return todo }))\r\n  }\r\n\r\n  function nextPage() {\r\n    setIsEdit(false)\r\n    if (currentPage != Math.ceil(sortedTodos.length / todosPerPage)) setCurrentPage(currentPage + 1)\r\n    setTodos(todos.map(todo => {if (todo.isEditing !== false){\r\n      todo.isEditing = false\r\n    }\r\n    return todo }))\r\n      \r\n  }\r\n\r\n  function prevPage() {\r\n    setIsEdit(false)\r\n    if (currentPage != 1) setCurrentPage(currentPage - 1)\r\n    setTodos(todos.map(todo => {if (todo.isEditing !== false){\r\n      todo.isEditing = false\r\n    }\r\n    return todo }))\r\n    \r\n  }\r\n\r\n\r\n\r\n  function addTodo(value) {\r\n    \r\n      setDoneUnDone('all')\r\n      const id = Date.now()\r\n      if (value.trim()) {\r\n        console.log(value)\r\n        setTodos(todos.concat(\r\n          {\r\n            id: id,\r\n            title: value,\r\n            completed: false,\r\n            date: `${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`,\r\n            isEditing: false\r\n    \r\n          }\r\n        ))\r\n        setSortedTodos(todos.concat(\r\n          {\r\n            id: id,\r\n            title: value,\r\n            completed: false,\r\n            date: `${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`,\r\n            isEditing: false\r\n    \r\n          }\r\n        ))\r\n        \r\n        \r\n      }\r\n    }\r\n    \r\n    function hanlePageClick(number) { \r\n      setIsEdit(false)\r\n      setCurrentPage(number)\r\n      setTodos(todos.map(todo => {if (todo.isEditing !== false){\r\n        todo.isEditing = false\r\n      }\r\n      return todo }))\r\n    }\r\n\r\n    \r\n  return (\r\n    <div className=\"App\">\r\n    <body>\r\n      <header>\r\n        <section>\r\n            <p className=\"title\">ToDo</p>\r\n        </section>\r\n          <InputToDo addTodo={addTodo}/>\r\n        <section className=\"control\">\r\n            <section className=\"dund\">\r\n                {doneUnDone === 'all' ? <input type=\"button\" onClick={() => sortByComplete('all')} value=\"All\" className='active' title=\"Show all plans\"/> : \r\n                <input type=\"button\" onClick={() => sortByComplete('all')} value=\"All\"  title=\"Show all plans\"/>} \r\n                {doneUnDone === 'done' ? <input type=\"button\" onClick={() => sortByComplete('done')} value=\"Done\" className='active' title=\"Show completed plans\"/> : \r\n                <input type=\"button\" onClick={() => sortByComplete('done')} value=\"Done\"  title=\"Show completed plans\"/>}\r\n                {doneUnDone === 'undone' ? <input type=\"button\" onClick={() => sortByComplete('undone')} value=\"Undone\" className='active' title=\"Show uncompleted plans\"/> : \r\n                <input type=\"button\" onClick={() => sortByComplete('undone')} value=\"Undone\"  title=\"Show uncompleted plans\"/>}\r\n            </section>\r\n            <section className=\"dund\">\r\n                <span className=\"lblar\"> Sort by date </span>\r\n                    <input className=\"btnD\" onClick={() => sortByDate('up')} type=\"image\" src=\"premium-icon-up-arrow-3987238.png\" title=\"New first\"/>\r\n                \r\n                    <input className=\"btnD\" onClick={() => sortByDate('down')} type=\"image\" src=\"reverse.png\" title=\"Old first\"/>\r\n                \r\n            </section>\r\n        </section>\r\n    </header>\r\n\r\n    <TDList setIsEdit={setIsEdit} isEdit={isEdit} isEditingTodo={isEditingTodo} editing={editToDo} sortedTodos={todosForCurrentPage} doneTodo={doneTodo} removeTodo={removeTodo}/>\r\n\r\n    \r\n\r\n    <footer>\r\n    \r\n      <Pagination currentPage={currentPage} todosLength={sortedTodos.length} todosPerPage={todosPerPage} pageClick={hanlePageClick} nextPage={nextPage} prevPage={prevPage}/>  \r\n    \r\n    </footer>\r\n    </body>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}